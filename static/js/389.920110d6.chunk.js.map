{"version":3,"file":"static/js/389.920110d6.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactListItem/ContactListItem.styled.js","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/GlobalStyle.js","components/Layout.js","pages/Contacts.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterContacts) => {\n    if (!filterContacts) return contacts;\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterContacts.toLowerCase())\n    );\n  }\n);\n","import styled from 'styled-components';\nimport { Form as FormikForm,  ErrorMessage as FormikError } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  margin: 30px 0px;\n  padding: 10px;\n  width: 400px;\n  border: 1px solid black;\n`;\n\nexport const FormField = styled.label`\n  display: flex;\n  gap: 2px;\n  flex-direction: column;\n  width: 270px;\n  font-size: 18px;\n`;\n\nexport const FormButton = styled.button`\n  width: 150px;\n  padding: 10px 15px;\n  text-transform: capitalize;\n  font-size: 16px;\n  border: none;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: #C3C1C1;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background-color: #00CCCC;\n  }\n`;\n\nexport const ErrorMessage = styled(FormikError)`\ncolor: tomato;\nfont-size: 10px;\n`","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { useSelector } from 'react-redux/es/exports';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  FormField,\n  Form,\n  FormButton,\n  ErrorMessage,\n} from 'components/ContactForm/ContactForm.styled';\n\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message:\n        'Invalid name. Name may contain only letters, apostrophe, dash and spaces.',\n    })\n    .required('Please, enter contact name'),\n  number: Yup.string()\n    .matches( /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n, {\n      message: 'Phone number is not valid.',\n    })\n    .required('Please, enter phone number'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n   \n    const existstName = contacts.find(contact => contact.name === values.name);\n  \n    if (existstName) {\n      return Notify.info(`This name is already in contacts!`);\n    }\n    dispatch(addContact(values));\n    actions.resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={ContactSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <FormField>\n            Name\n            <Field type=\"text\" name=\"name\" />\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </FormField>\n          <FormField>\n            Number\n            <Field type=\"tel\" name=\"number\" />\n            <ErrorMessage name=\"number\" component=\"span\" />\n          </FormField>\n          <FormButton type=\"submit\">Add contact</FormButton>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Item = styled.li`\n font-weight: 500;\n  font-size: 20px;\n  line-height: calc(22 / 20);\n  letter-spacing: 0.02em;\n margin-bottom: 10px;\n \n`\nexport const ButtonDelete = styled.button`\n  /* padding: 10px 23px; */\n  margin: 0;\n  margin-left: 15px;\n  text-transform: capitalize;\n  width: 80px;\n  font-size: 14px;\n  border: none;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  cursor: pointer;\n  background-color: #C3C1C1;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    background-color: #00CCCC;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Item } from './ContactListItem.styled';\nimport { ButtonDelete } from './ContactListItem.styled';\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactListItem = ({ contact: {id, name, number} }) => {\n  \nconst dispatch = useDispatch();\n   \n  return (\n    <Item>\n      {name}:{number}\n      <ButtonDelete type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        Delete\n      </ButtonDelete>\n    </Item>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n","import styled from \"styled-components\";\n\nexport const List = styled.ul`\nmargin-top: 10px;\n`","import React from 'react';\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\nimport { useSelector } from 'react-redux/es/exports';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <List>\n      {visibleContacts.map(contact => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  margin: 30px 0px;\n  display: flex;\n`;\nexport const Text = styled.label`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: calc(22 / 20);\n  letter-spacing: 0.02em;\n  display: flex;\n  flex-direction: column;\n  gap: 2px;\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilterContacts } from 'redux/contacts/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nimport { FilterContainer, Text } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n\n  const dispatch = useDispatch();\n  const handleFilterChange = event =>  dispatch(setFilterContacts(event.target.value));\n \n  return (\n    <FilterContainer>\n    <Text>\n      Find contacts by name\n      <input type=\"text\" value={filter}  onChange={handleFilterChange}/>\n    </Text>\n  </FilterContainer>\n);\n}\n\n\n\n ","import { createGlobalStyle }  from 'styled-components'\nimport 'modern-normalize';\nexport const GlobalStyle = createGlobalStyle`\nbody {\n background-color: \t#EFEFEF;\n  margin: 0px;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\np, h1, h2, ul {\n  margin: 0;\n}\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n\n`","import styled from \"styled-components\";\n\nexport const Layout = styled.div`\nmargin: 50px;\n`;","import { ContactForm } from '../components/ContactForm/ContactForm';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport { Filter } from '../components/Filter/Filter';\nimport { GlobalStyle } from '../components/GlobalStyle';\nimport { Layout } from '../components/Layout';\nimport { useDispatch, useSelector  } from 'react-redux'; \nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { Helmet } from 'react-helmet';\n\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  \n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Layout>\n      <GlobalStyle />\n      <Helmet>\n      <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n      {isLoading && !error && <b>Request in progress...</b>}\n    </Layout>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","createSelector","filterContacts","contact","name","toLowerCase","includes","Form","styled","FormikForm","FormField","FormButton","ErrorMessage","FormikError","ContactSchema","Yup","shape","matches","message","required","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","find","Notify","addContact","resetForm","type","component","Item","ButtonDelete","ContactListItem","id","onClick","deleteContact","List","ContactList","visibleContacts","map","FilterContainer","Text","Filter","value","onChange","event","setFilterContacts","target","GlobalStyle","createGlobalStyle","Layout","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}