{"version":3,"file":"static/js/213.13bd5e90.chunk.js","mappings":"2NAOaA,IAHOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,wCAGQA,EAAAA,GAAAA,MAAH,wH,IAQMA,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0D,sCCTnBG,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KACJG,QAAQ,4CAA6C,CACpDC,QAAS,wBAEVC,SAAS,uBACZC,SAAUN,EAAAA,KACPO,IAAI,EAAG,sCACPJ,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBE,SAAS,4BAGDG,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MASjB,OACE,0BACE,SAAC,KAAD,CACEC,cAAe,CACbT,MAAO,GACPI,SAAU,IAEZM,iBAAkBb,EAClBc,SAfe,SAACC,EAAQC,GAC5BC,QAAQC,IAAIH,GACZL,GAASS,EAAAA,EAAAA,IAAMJ,IACfC,EAAQI,WACT,EAKG,UAQE,UAAC,KAAD,YACE,UAACxB,EAAD,oBAEE,SAAC,KAAD,CAAOyB,KAAK,QAAQC,KAAK,QAAQC,YAAY,WAC7C,SAAC,KAAD,CAAcD,KAAK,QAAQE,UAAU,aAGvC,UAAC5B,EAAD,uBAEE,SAAC,KAAD,CAAOyB,KAAK,WAAWC,KAAK,WAAWC,YAAY,cACnD,SAAC,KAAD,CAAcD,KAAK,WAAWE,UAAU,aAE1C,mBAAQH,KAAK,SAAb,yBAKT,ECvDc,SAASI,IACpB,OACI,0BACI,SAAChB,EAAD,KAGX,C","sources":["components/LogInForm/LogInForm.styled.js","components/LogInForm/LogInForm.jsx","pages/LogIn.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Form as FormikForm,  ErrorMessage as FormikError } from 'formik';\n\n\nexport const Form = styled(FormikForm)`\n width: 320px;\n`\nexport const FormField = styled.label`\n  display: flex;\n  gap: 2px;\n  flex-direction: column;\n  width: 270px;\n  font-size: 18px;\n`;\n\nexport const ErrorMessage = styled(FormikError)`\ncolor: tomato;\nfont-size: 10px;\n`","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { FormField } from './LogInForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\n\nconst LogInSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, {\n      message: 'Email is not valid.',\n    })\n    .required('Please, enter email'),\n  password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .required('Please, enter password'),\n});\n\nexport const LogInForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    console.log(values)\n    dispatch(logIn(values))\n    actions.resetForm();\n  }\n\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          email: '',\n          password: '',\n        }}\n        validationSchema={LogInSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <FormField>\n            Email\n            <Field type=\"email\" name=\"email\" placeholder=\"email\" />\n            <ErrorMessage name=\"email\" component=\"span\" />\n          </FormField>\n\n          <FormField>\n            Password\n            <Field type=\"password\" name=\"password\" placeholder=\"password\" />\n            <ErrorMessage name=\"password\" component=\"span\" />\n          </FormField>\n          <button type=\"submit\">LogIn</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { LogInForm } from \"components/LogInForm/LogInForm\";\n\nexport default function LogIn() {\n    return (\n        <div>\n            <LogInForm />\n       </div>\n   )\n}"],"names":["FormField","styled","FormikForm","FormikError","LogInSchema","Yup","shape","email","matches","message","required","password","min","LogInForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","console","log","logIn","resetForm","type","name","placeholder","component","LogIn"],"sourceRoot":""}