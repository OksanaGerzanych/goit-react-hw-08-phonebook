{"version":3,"file":"static/js/728.bba9cb1d.chunk.js","mappings":"2NAOaA,IAHOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,wCAGQA,EAAAA,GAAAA,MAAH,wH,IASMA,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0D,sCCVnBG,EAAiBC,EAAAA,KAAaC,MAAM,CACxCC,KAAMF,EAAAA,KACHG,QAAQ,yHAA8D,CACrEC,QAAS,kBAEVC,SAAS,sBACZC,MAAON,EAAAA,KACJG,QAAQ,4CAA6C,CACpDC,QAAS,wBAEVC,SAAS,uBACZE,SAAUP,EAAAA,KACPQ,IAAI,EAAG,sCACPL,QAAQ,QAAS,8BACjBA,QAAQ,QAAS,wCACjBA,QAAQ,QAAS,yCACjBE,SAAS,4BAGDI,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MAQjB,OACE,0BACE,SAAC,KAAD,CACEC,cAAe,CACbV,KAAM,GACNI,MAAO,GACPC,SAAU,IAEZM,iBAAkBd,EAClBe,SAfe,SAACC,EAAQC,GAC5BC,QAAQC,IAAIH,GACZL,GAASS,EAAAA,EAAAA,IAASJ,IAClBC,EAAQI,WACX,EAIK,UASE,UAAC,KAAD,YACE,UAACzB,EAAD,mBAEE,SAAC,KAAD,CAAO0B,KAAK,OAAOnB,KAAK,OAAOoB,YAAY,UAC3C,SAAC,KAAD,CAAcpB,KAAK,OAAOqB,UAAU,aAGtC,UAAC5B,EAAD,oBAEE,SAAC,KAAD,CAAOO,KAAK,QAAQoB,YAAY,QAAQD,KAAK,WAC7C,SAAC,KAAD,CAAcnB,KAAK,QAAQqB,UAAU,aAGvC,UAAC5B,EAAD,uBAEE,SAAC,KAAD,CAAO0B,KAAK,WAAWnB,KAAK,WAAWoB,YAAY,cACnD,SAAC,KAAD,CAAcpB,KAAK,WAAWqB,UAAU,aAE1C,mBAAQF,KAAK,SAAb,4BAKT,E,UCjEc,SAASG,IACtB,OACE,4BACE,SAACC,EAAA,EAAD,WACE,+CAEF,SAAChB,EAAD,MAGL,C","sources":["components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/Register.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Form as FormikForm,  ErrorMessage as FormikError } from 'formik';\n\n\nexport const Form = styled(FormikForm)`\n width: 320px;\n`\nexport const FormField = styled.label`\n  display: flex;\n  gap: 2px;\n  flex-direction: column;\n  width: 270px;\n  font-size: 18px;\n`;\n\n\nexport const ErrorMessage = styled(FormikError)`\ncolor: tomato;\nfont-size: 10px;\n`","import { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { FormField } from './RegisterForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nconst RegisterSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(/^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/, {\n      message: 'Invalid name.',\n    })\n    .required('Please, enter name'),\n  email: Yup.string()\n    .matches(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i, {\n      message: 'Email is not valid.',\n    })\n    .required('Please, enter email'),\n  password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .required('Please, enter password'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, actions) => {\n    console.log(values)\n    dispatch(register(values))\n    actions.resetForm();\n}\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          email: '',\n          password: '',\n        }}\n        validationSchema={RegisterSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <FormField>\n            Name\n            <Field type=\"text\" name=\"name\" placeholder=\"name\" />\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </FormField>\n\n          <FormField>\n            Email\n            <Field name=\"email\" placeholder=\"email\" type=\"email\" />\n            <ErrorMessage name=\"email\" component=\"span\" />\n          </FormField>\n\n          <FormField>\n            Password\n            <Field type=\"password\" name=\"password\" placeholder=\"password\" />\n            <ErrorMessage name=\"password\" component=\"span\" />\n          </FormField>\n          <button type=\"submit\">Register</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { Helmet } from 'react-helmet';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["FormField","styled","FormikForm","FormikError","RegisterSchema","Yup","shape","name","matches","message","required","email","password","min","RegisterForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","console","log","register","resetForm","type","placeholder","component","Register","Helmet"],"sourceRoot":""}